//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace QuantDownloader {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private quotesDataTable tablequotes;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["quotes"] != null)) {
                    this.Tables.Add(new quotesDataTable(ds.Tables["quotes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public quotesDataTable quotes {
            get {
                return this.tablequotes;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["quotes"] != null)) {
                this.Tables.Add(new quotesDataTable(ds.Tables["quotes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablequotes = ((quotesDataTable)(this.Tables["quotes"]));
            if ((this.tablequotes != null)) {
                this.tablequotes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablequotes = new quotesDataTable();
            this.Tables.Add(this.tablequotes);
        }
        
        private bool ShouldSerializequotes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void quotesRowChangeEventHandler(object sender, quotesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class quotesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnquClose;
            
            private DataColumn columnquDate;
            
            private DataColumn columnquHigh;
            
            private DataColumn columnquId;
            
            private DataColumn columnquLow;
            
            private DataColumn columnquOpen;
            
            private DataColumn columnquTicker;
            
            internal quotesDataTable() : 
                    base("quotes") {
                this.InitClass();
            }
            
            internal quotesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn quCloseColumn {
                get {
                    return this.columnquClose;
                }
            }
            
            internal DataColumn quDateColumn {
                get {
                    return this.columnquDate;
                }
            }
            
            internal DataColumn quHighColumn {
                get {
                    return this.columnquHigh;
                }
            }
            
            internal DataColumn quIdColumn {
                get {
                    return this.columnquId;
                }
            }
            
            internal DataColumn quLowColumn {
                get {
                    return this.columnquLow;
                }
            }
            
            internal DataColumn quOpenColumn {
                get {
                    return this.columnquOpen;
                }
            }
            
            internal DataColumn quTickerColumn {
                get {
                    return this.columnquTicker;
                }
            }
            
            public quotesRow this[int index] {
                get {
                    return ((quotesRow)(this.Rows[index]));
                }
            }
            
            public event quotesRowChangeEventHandler quotesRowChanged;
            
            public event quotesRowChangeEventHandler quotesRowChanging;
            
            public event quotesRowChangeEventHandler quotesRowDeleted;
            
            public event quotesRowChangeEventHandler quotesRowDeleting;
            
            public void AddquotesRow(quotesRow row) {
                this.Rows.Add(row);
            }
            
            public quotesRow AddquotesRow(System.Single quClose, System.DateTime quDate, System.Single quHigh, System.Single quLow, System.Single quOpen, string quTicker) {
                quotesRow rowquotesRow = ((quotesRow)(this.NewRow()));
                rowquotesRow.ItemArray = new object[] {
                        quClose,
                        quDate,
                        quHigh,
                        null,
                        quLow,
                        quOpen,
                        quTicker};
                this.Rows.Add(rowquotesRow);
                return rowquotesRow;
            }
            
            public quotesRow FindByquId(int quId) {
                return ((quotesRow)(this.Rows.Find(new object[] {
                            quId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                quotesDataTable cln = ((quotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new quotesDataTable();
            }
            
            internal void InitVars() {
                this.columnquClose = this.Columns["quClose"];
                this.columnquDate = this.Columns["quDate"];
                this.columnquHigh = this.Columns["quHigh"];
                this.columnquId = this.Columns["quId"];
                this.columnquLow = this.Columns["quLow"];
                this.columnquOpen = this.Columns["quOpen"];
                this.columnquTicker = this.Columns["quTicker"];
            }
            
            private void InitClass() {
                this.columnquClose = new DataColumn("quClose", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquClose);
                this.columnquDate = new DataColumn("quDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquDate);
                this.columnquHigh = new DataColumn("quHigh", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquHigh);
                this.columnquId = new DataColumn("quId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquId);
                this.columnquLow = new DataColumn("quLow", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquLow);
                this.columnquOpen = new DataColumn("quOpen", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquOpen);
                this.columnquTicker = new DataColumn("quTicker", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquTicker);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnquId}, true));
                this.columnquId.AutoIncrement = true;
                this.columnquId.AllowDBNull = false;
                this.columnquId.Unique = true;
            }
            
            public quotesRow NewquotesRow() {
                return ((quotesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new quotesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(quotesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.quotesRowChanged != null)) {
                    this.quotesRowChanged(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.quotesRowChanging != null)) {
                    this.quotesRowChanging(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.quotesRowDeleted != null)) {
                    this.quotesRowDeleted(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.quotesRowDeleting != null)) {
                    this.quotesRowDeleting(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovequotesRow(quotesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class quotesRow : DataRow {
            
            private quotesDataTable tablequotes;
            
            internal quotesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablequotes = ((quotesDataTable)(this.Table));
            }
            
            public System.Single quClose {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.quCloseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.quCloseColumn] = value;
                }
            }
            
            public System.DateTime quDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablequotes.quDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.quDateColumn] = value;
                }
            }
            
            public System.Single quHigh {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.quHighColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.quHighColumn] = value;
                }
            }
            
            public int quId {
                get {
                    return ((int)(this[this.tablequotes.quIdColumn]));
                }
                set {
                    this[this.tablequotes.quIdColumn] = value;
                }
            }
            
            public System.Single quLow {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.quLowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.quLowColumn] = value;
                }
            }
            
            public System.Single quOpen {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.quOpenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.quOpenColumn] = value;
                }
            }
            
            public string quTicker {
                get {
                    try {
                        return ((string)(this[this.tablequotes.quTickerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.quTickerColumn] = value;
                }
            }
            
            public bool IsquCloseNull() {
                return this.IsNull(this.tablequotes.quCloseColumn);
            }
            
            public void SetquCloseNull() {
                this[this.tablequotes.quCloseColumn] = System.Convert.DBNull;
            }
            
            public bool IsquDateNull() {
                return this.IsNull(this.tablequotes.quDateColumn);
            }
            
            public void SetquDateNull() {
                this[this.tablequotes.quDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsquHighNull() {
                return this.IsNull(this.tablequotes.quHighColumn);
            }
            
            public void SetquHighNull() {
                this[this.tablequotes.quHighColumn] = System.Convert.DBNull;
            }
            
            public bool IsquLowNull() {
                return this.IsNull(this.tablequotes.quLowColumn);
            }
            
            public void SetquLowNull() {
                this[this.tablequotes.quLowColumn] = System.Convert.DBNull;
            }
            
            public bool IsquOpenNull() {
                return this.IsNull(this.tablequotes.quOpenColumn);
            }
            
            public void SetquOpenNull() {
                this[this.tablequotes.quOpenColumn] = System.Convert.DBNull;
            }
            
            public bool IsquTickerNull() {
                return this.IsNull(this.tablequotes.quTickerColumn);
            }
            
            public void SetquTickerNull() {
                this[this.tablequotes.quTickerColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class quotesRowChangeEvent : EventArgs {
            
            private quotesRow eventRow;
            
            private DataRowAction eventAction;
            
            public quotesRowChangeEvent(quotesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public quotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
