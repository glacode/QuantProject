//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace QuantProject.Applications.Downloader {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ValidateDataset : DataSet {
        
        private quotesDataTable tablequotes;
        
        public ValidateDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ValidateDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["quotes"] != null)) {
                    this.Tables.Add(new quotesDataTable(ds.Tables["quotes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public quotesDataTable quotes {
            get {
                return this.tablequotes;
            }
        }
        
        public override DataSet Clone() {
            ValidateDataset cln = ((ValidateDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["quotes"] != null)) {
                this.Tables.Add(new quotesDataTable(ds.Tables["quotes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablequotes = ((quotesDataTable)(this.Tables["quotes"]));
            if ((this.tablequotes != null)) {
                this.tablequotes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ValidateDataset";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ValidateDataset.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablequotes = new quotesDataTable();
            this.Tables.Add(this.tablequotes);
        }
        
        private bool ShouldSerializequotes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void quotesRowChangeEventHandler(object sender, quotesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class quotesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTicker;
            
            private DataColumn columnTheDate;
            
            private DataColumn columnTheOpen;
            
            private DataColumn columnHigh;
            
            private DataColumn columnLow;
            
            private DataColumn columnTheClose;
            
            private DataColumn columnVolume;
            
            private DataColumn columnAdjOpen;
            
            private DataColumn columnAdjHigh;
            
            private DataColumn columnAdjLow;
            
            private DataColumn columnAdjClose;
            
            private DataColumn columnAdjVolume;
            
            private DataColumn columnErrorDescription;
            
            internal quotesDataTable() : 
                    base("quotes") {
                this.InitClass();
            }
            
            internal quotesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TickerColumn {
                get {
                    return this.columnTicker;
                }
            }
            
            internal DataColumn TheDateColumn {
                get {
                    return this.columnTheDate;
                }
            }
            
            internal DataColumn TheOpenColumn {
                get {
                    return this.columnTheOpen;
                }
            }
            
            internal DataColumn HighColumn {
                get {
                    return this.columnHigh;
                }
            }
            
            internal DataColumn LowColumn {
                get {
                    return this.columnLow;
                }
            }
            
            internal DataColumn TheCloseColumn {
                get {
                    return this.columnTheClose;
                }
            }
            
            internal DataColumn VolumeColumn {
                get {
                    return this.columnVolume;
                }
            }
            
            internal DataColumn AdjOpenColumn {
                get {
                    return this.columnAdjOpen;
                }
            }
            
            internal DataColumn AdjHighColumn {
                get {
                    return this.columnAdjHigh;
                }
            }
            
            internal DataColumn AdjLowColumn {
                get {
                    return this.columnAdjLow;
                }
            }
            
            internal DataColumn AdjCloseColumn {
                get {
                    return this.columnAdjClose;
                }
            }
            
            internal DataColumn AdjVolumeColumn {
                get {
                    return this.columnAdjVolume;
                }
            }
            
            internal DataColumn ErrorDescriptionColumn {
                get {
                    return this.columnErrorDescription;
                }
            }
            
            public quotesRow this[int index] {
                get {
                    return ((quotesRow)(this.Rows[index]));
                }
            }
            
            public event quotesRowChangeEventHandler quotesRowChanged;
            
            public event quotesRowChangeEventHandler quotesRowChanging;
            
            public event quotesRowChangeEventHandler quotesRowDeleted;
            
            public event quotesRowChangeEventHandler quotesRowDeleting;
            
            public void AddquotesRow(quotesRow row) {
                this.Rows.Add(row);
            }
            
            public quotesRow AddquotesRow(string Ticker, System.DateTime TheDate, System.Single TheOpen, System.Single High, System.Single Low, System.Single TheClose, int Volume, System.Single AdjOpen, System.Single AdjHigh, System.Single AdjLow, System.Single AdjClose, System.Single AdjVolume, string ErrorDescription) {
                quotesRow rowquotesRow = ((quotesRow)(this.NewRow()));
                rowquotesRow.ItemArray = new object[] {
                        Ticker,
                        TheDate,
                        TheOpen,
                        High,
                        Low,
                        TheClose,
                        Volume,
                        AdjOpen,
                        AdjHigh,
                        AdjLow,
                        AdjClose,
                        AdjVolume,
                        ErrorDescription};
                this.Rows.Add(rowquotesRow);
                return rowquotesRow;
            }
            
            public quotesRow FindByTickerTheDate(string Ticker, System.DateTime TheDate) {
                return ((quotesRow)(this.Rows.Find(new object[] {
                            Ticker,
                            TheDate})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                quotesDataTable cln = ((quotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new quotesDataTable();
            }
            
            internal void InitVars() {
                this.columnTicker = this.Columns["Ticker"];
                this.columnTheDate = this.Columns["TheDate"];
                this.columnTheOpen = this.Columns["TheOpen"];
                this.columnHigh = this.Columns["High"];
                this.columnLow = this.Columns["Low"];
                this.columnTheClose = this.Columns["TheClose"];
                this.columnVolume = this.Columns["Volume"];
                this.columnAdjOpen = this.Columns["AdjOpen"];
                this.columnAdjHigh = this.Columns["AdjHigh"];
                this.columnAdjLow = this.Columns["AdjLow"];
                this.columnAdjClose = this.Columns["AdjClose"];
                this.columnAdjVolume = this.Columns["AdjVolume"];
                this.columnErrorDescription = this.Columns["ErrorDescription"];
            }
            
            private void InitClass() {
                this.columnTicker = new DataColumn("Ticker", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTicker);
                this.columnTheDate = new DataColumn("TheDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTheDate);
                this.columnTheOpen = new DataColumn("TheOpen", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTheOpen);
                this.columnHigh = new DataColumn("High", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHigh);
                this.columnLow = new DataColumn("Low", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLow);
                this.columnTheClose = new DataColumn("TheClose", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTheClose);
                this.columnVolume = new DataColumn("Volume", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVolume);
                this.columnAdjOpen = new DataColumn("AdjOpen", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdjOpen);
                this.columnAdjHigh = new DataColumn("AdjHigh", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdjHigh);
                this.columnAdjLow = new DataColumn("AdjLow", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdjLow);
                this.columnAdjClose = new DataColumn("AdjClose", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdjClose);
                this.columnAdjVolume = new DataColumn("AdjVolume", typeof(System.Single), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdjVolume);
                this.columnErrorDescription = new DataColumn("ErrorDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnErrorDescription);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTicker,
                                this.columnTheDate}, true));
                this.columnTicker.AllowDBNull = false;
                this.columnTheDate.AllowDBNull = false;
                this.columnErrorDescription.ReadOnly = true;
            }
            
            public quotesRow NewquotesRow() {
                return ((quotesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new quotesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(quotesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.quotesRowChanged != null)) {
                    this.quotesRowChanged(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.quotesRowChanging != null)) {
                    this.quotesRowChanging(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.quotesRowDeleted != null)) {
                    this.quotesRowDeleted(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.quotesRowDeleting != null)) {
                    this.quotesRowDeleting(this, new quotesRowChangeEvent(((quotesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovequotesRow(quotesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class quotesRow : DataRow {
            
            private quotesDataTable tablequotes;
            
            internal quotesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablequotes = ((quotesDataTable)(this.Table));
            }
            
            public string Ticker {
                get {
                    return ((string)(this[this.tablequotes.TickerColumn]));
                }
                set {
                    this[this.tablequotes.TickerColumn] = value;
                }
            }
            
            public System.DateTime TheDate {
                get {
                    return ((System.DateTime)(this[this.tablequotes.TheDateColumn]));
                }
                set {
                    this[this.tablequotes.TheDateColumn] = value;
                }
            }
            
            public System.Single TheOpen {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.TheOpenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.TheOpenColumn] = value;
                }
            }
            
            public System.Single High {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.HighColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.HighColumn] = value;
                }
            }
            
            public System.Single Low {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.LowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.LowColumn] = value;
                }
            }
            
            public System.Single TheClose {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.TheCloseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.TheCloseColumn] = value;
                }
            }
            
            public int Volume {
                get {
                    try {
                        return ((int)(this[this.tablequotes.VolumeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.VolumeColumn] = value;
                }
            }
            
            public System.Single AdjOpen {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.AdjOpenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.AdjOpenColumn] = value;
                }
            }
            
            public System.Single AdjHigh {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.AdjHighColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.AdjHighColumn] = value;
                }
            }
            
            public System.Single AdjLow {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.AdjLowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.AdjLowColumn] = value;
                }
            }
            
            public System.Single AdjClose {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.AdjCloseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.AdjCloseColumn] = value;
                }
            }
            
            public System.Single AdjVolume {
                get {
                    try {
                        return ((System.Single)(this[this.tablequotes.AdjVolumeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.AdjVolumeColumn] = value;
                }
            }
            
            public string ErrorDescription {
                get {
                    try {
                        return ((string)(this[this.tablequotes.ErrorDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablequotes.ErrorDescriptionColumn] = value;
                }
            }
            
            public bool IsTheOpenNull() {
                return this.IsNull(this.tablequotes.TheOpenColumn);
            }
            
            public void SetTheOpenNull() {
                this[this.tablequotes.TheOpenColumn] = System.Convert.DBNull;
            }
            
            public bool IsHighNull() {
                return this.IsNull(this.tablequotes.HighColumn);
            }
            
            public void SetHighNull() {
                this[this.tablequotes.HighColumn] = System.Convert.DBNull;
            }
            
            public bool IsLowNull() {
                return this.IsNull(this.tablequotes.LowColumn);
            }
            
            public void SetLowNull() {
                this[this.tablequotes.LowColumn] = System.Convert.DBNull;
            }
            
            public bool IsTheCloseNull() {
                return this.IsNull(this.tablequotes.TheCloseColumn);
            }
            
            public void SetTheCloseNull() {
                this[this.tablequotes.TheCloseColumn] = System.Convert.DBNull;
            }
            
            public bool IsVolumeNull() {
                return this.IsNull(this.tablequotes.VolumeColumn);
            }
            
            public void SetVolumeNull() {
                this[this.tablequotes.VolumeColumn] = System.Convert.DBNull;
            }
            
            public bool IsAdjOpenNull() {
                return this.IsNull(this.tablequotes.AdjOpenColumn);
            }
            
            public void SetAdjOpenNull() {
                this[this.tablequotes.AdjOpenColumn] = System.Convert.DBNull;
            }
            
            public bool IsAdjHighNull() {
                return this.IsNull(this.tablequotes.AdjHighColumn);
            }
            
            public void SetAdjHighNull() {
                this[this.tablequotes.AdjHighColumn] = System.Convert.DBNull;
            }
            
            public bool IsAdjLowNull() {
                return this.IsNull(this.tablequotes.AdjLowColumn);
            }
            
            public void SetAdjLowNull() {
                this[this.tablequotes.AdjLowColumn] = System.Convert.DBNull;
            }
            
            public bool IsAdjCloseNull() {
                return this.IsNull(this.tablequotes.AdjCloseColumn);
            }
            
            public void SetAdjCloseNull() {
                this[this.tablequotes.AdjCloseColumn] = System.Convert.DBNull;
            }
            
            public bool IsAdjVolumeNull() {
                return this.IsNull(this.tablequotes.AdjVolumeColumn);
            }
            
            public void SetAdjVolumeNull() {
                this[this.tablequotes.AdjVolumeColumn] = System.Convert.DBNull;
            }
            
            public bool IsErrorDescriptionNull() {
                return this.IsNull(this.tablequotes.ErrorDescriptionColumn);
            }
            
            public void SetErrorDescriptionNull() {
                this[this.tablequotes.ErrorDescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class quotesRowChangeEvent : EventArgs {
            
            private quotesRow eventRow;
            
            private DataRowAction eventAction;
            
            public quotesRowChangeEvent(quotesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public quotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
